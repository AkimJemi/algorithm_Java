Container / Aggregator
 Array
 Linked List
 Tree
 Graph
 Table(DBMS)

Iterator 디자인 패턴은 컬렉션(예: 배열, 리스트 등)의 요소들에 순차적으로 접근할 수 있게 해주는 패턴입니다. 이 패턴은 컬렉션 내부의 구조를 드러내지 않으면서도, 그 안에 있는 각 요소에 하나씩 접근할 수 있도록 해줍니다.

### 주요 특징:
1. **순차 접근**: 컬렉션의 요소들에 순차적으로 접근할 수 있게 합니다.
예를 들어, 배열의 첫 번째 요소부터 마지막 요소까지 차례대로 접근할 수 있습니다.

2. **내부 구현 노출 방지**: 컬렉션의 내부 구조를 숨기면서 요소들에 접근할 수 있게 해줍니다.
Iterator를 사용하면, 컬렉션이 배열인지, 리스트인지 등의 내부 구조에 상관없이 동일한 방식으로 요소들을 순회할 수 있습니다.

3. **반복 작업의 일관성**: 컬렉션의 요소들을 순회하는 반복 작업이 일관된 방식으로 처리되며, 이를 통해 코드의 재사용성을 높일 수 있습니다.

4. **다양한 반복 방법 지원**: Iterator는 단순히 순차적으로 접근하는 것 외에도, 역순으로 접근하거나, 특정 조건에 맞는 요소들만을 필터링하는 등 다양한 반복 방법을 지원할 수 있습니다.

### 예시:
Java에서 `Iterator` 인터페이스를 사용하는 예를 들면 다음과 같습니다.

```java
List<String> list = new ArrayList<>();
list.add("apple");
list.add("banana");
list.add("cherry");

Iterator<String> iterator = list.iterator();
while (iterator.hasNext()) {
    String element = iterator.next();
    System.out.println(element);
}
```

이 예에서 `Iterator`는 리스트의 각 요소에 순차적으로 접근하여, 요소를 하나씩 출력합니다.
컬렉션의 구체적인 구현 방식(배열, 리스트 등)에 상관없이 동일한 방법으로 요소에 접근할 수 있게 해주는 것이 `Iterator` 패턴의 핵심입니다.
